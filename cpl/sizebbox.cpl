
;		CPL code to implement sizing bboxes.

;		Date: May 12 ,1991
;		Version: 1
;		Author: who else?

; =-=-=-=-=-=-=-=-=  Useful subroutines. =-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-

; nothing much here...

; =-=-=-=-=-=-=-=-= Message processing starts here. =-=-=-=-=-=-=-=-==-=-=-=-=-

Sizebbox	DEFPROP

Sizebbox	STARTPROP
		
		OWNER	A:R1,Const:Self			; Get feature

;		 Do regular stuff if no messages
_Check_messages	BNOMSGS	A:R1,A:_Check_wiped&

;		 Get topmost message
		UNQMSG	A:R2

;		 Message jump table starts here.
_Check_activate	BNEQUAL	A:R2,Msg:Activate,A:_Check_suicide&
		PICK	A:R1*				; activation ==> pick!
		JUMP	A:_End_sizebbox&

_Check_suicide	BNEQUAL	A:R2,Msg:Suicide,A:_Check_pickmsg&
		PARENT	A:R1*,A:R2
		CHLDRN	A:R1*,A:R3
		ADOPT	A:R2*,A:R3*,Const:TRUE
		CPDELETE	A:R1*
		JUMP	A:_End_sizebbox&

; Other objects could be trying to un/pick something in a marquee and also get
; the sizebbox: if so, we want to forward that un/pick message to the children!

_Check_pickmsg	BNEQUAL	A:R2,Msg:Pick,A:_Check_unpickmsg&
		CHLDRN	A:R1*,A:R2
		MAKEMSG	Msg:Pick
		QMSG	A:R2*,Const:Prioritymsg
		JUMP	A:_End_sizebbox&

_Check_unpickmsg BNEQUAL	A:R2,Msg:Unpick,A:_Check_constrainmsg&
		CHLDRN	A:R1*,A:R2
		MAKEMSG	Msg:Unpick
		QMSG	A:R2*,Const:Prioritymsg
		JUMP	A:_End_sizebbox&

_Check_constrainmsg BNEQUAL	A:R2,Msg:Constraining,A:_End_sizebbox&
		UNQMSG	A:_Constraining			; whether to turn on/off
		JUMP	A:_End_sizebbox&

; =-=-=-=-=-=-=-= Event handling code starts here =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

_Check_wiped	BWIPED	AA:XOP*,A:_End_sizebbox&	; Is event active?

;		We check if owner is selectable because this should never
;		execute unless the owner is selectable.

_Check_pick	OWNER	A:R1,Const:Self			; Is owner selectable?
		HASPROP	A:R1*,Prop:Selectable,A:R3,Const:Self
		BFALSE	A:R3,A:_End_sizebbox&		; no, quit

;		Is event a pick?

		BNEQUAL	AA:XOP*,Opcd:PICK,A:_End_sizebbox&
;		Picking selectables?
		BNEQUAL	AA:XAS,Prop:Selectable,A:_End_sizebbox&	

_Pickit		PICK	A:R1*				; pick the sizebbox
;							; subfeature,
		MAKEMSG	Msg:Incomingsize
		MAKEMSG	A:R1*
;		CHLDRN	Obj:Measure_Plate,A:R6
;		INDEX	A:R6,A:R7,Const:I7		; send msg to sizer
		QMSG	Obj:Cube_Length,Const:Prioritymsg


_Finish_pick	WIPE	A:XOP*				; then wipe this pick
		JUMP	A:_End_sizebbox&


_End_sizebbox	BMSGS	A:R1,A:_Check_messages&
		RTS

; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
; 				LOCAL VARS
; =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


;	Boolean val for whether constraining cursor moves or not...
;	compare and contrast with constraining during scaling or other uses

_Constraining	CPLDATA
_Cursor_delta	CPLDATA
