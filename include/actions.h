 
/* FILE: actions.h */

#ifndef actions_includes
#define actions_includes

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/*                                                                        */
/*     System Actions Routines Header File for the Cutplane Editor        */
/*                                                                        */
/* Authors: WAK                                      Date: May 1,1990     */
/*                                                                        */
/* Copyright (C) 1987,1988,1989,1990 William Kessler and Larry Edwards.   */
/* All Rights Reserved.                                                   */
/*                                                                        */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#include <platform_gl.h>

#include "geometry.h"
#include "list.h"

#define Propertyactionsqueue 1
#define Featureactionsqueue 2

#define Usetranslateflags TRUE
#define Donotusetranslateflags FALSE

#define Maxactions 5
#define Maxinputactionmods 5

#define Action_type 25
#define Actionsize sizeof(actiontype)

/* Input Action Constants */

typedef enum
{
  Nocontrol_act = 0,

  /* Low level controls translated into input actions by control.c */
  Movecrosshair_act,		/* Move the crosshair or plane to a specific */
				/* location or relative location. */

  Startplanemove_act,		/* The Plane movement button was pressed down.*/
  Endplanemove_act,		/* The Plane movement button was released. */
  
  Startrotateobj_act,		/* The Object rotate button was pressed down. */
  Endrotateobj_act,		/* The Object rotate button was released. */

  Startconstraining_act,	/* The Constrain button was pressed down. */
  Endconstraining_act,		/* The Constrain button was released. */

  Rotateroom_act,		/* Rotate the room about the x or y axes */

  Zoom_act,			/* Zoom/out in using this integer as a scalar */
				/* If > 0 zoom in, if < 0 zoom out. */
  Zoomto_act,			/* Zoom in/out so that a specific bbox fits */
				/* the room. */
  Usezbuffer_act,		/* The Zbuffer button was toggled */
  Print_act,			/* Create Postscript output file */

  Spool_act,			/* Start/stop spooling actions to a file */
  Unspool_act,			/* Start/stop unspooling actions from a file */
  
  Quit_act,

  /* The following buttons will be defunct soon enough. */
  Load_act,			/* Load objects from files button pressed. */
  Save_act,			/* Save objects from files button pressed. */

  /* Object control toggles/controls handled by user.c */
  Pick_act,			/* The Manipulate button was pressed down. */
  PickNoUnpick_act,		/* The Manipulate button was pressed down, */
				/* while the Multipleselect button was down.*/
  Release_act,			/* The Manipulate button was released. */
  ReleaseNoUnpick_act,		/* The Manipulate button was released */
				/* while the Multipleselect button was down.*/

  Drag_act,			/* Drag a feature: generated by modified */
				/* movecrosshair actions, or internally. */
  Translate_act,		/* Translate a feature: the user cannot  */
				/* generate this, only internal code can.*/
  Rotate_act,			/* Rotate a feature: the user cannot generate */
				/* this, only internal code can. */
  Scale_act,			/* Scale a feature: generated by modified */
				/* movecrosshair actions, or internally.*/
  Transform_act,		/* Transform a feature with a given matrix. */
				/* Can combine any or all of the last 3 acts.*/
				/* Matrix and its inverse stored in*/
				/* transformdata */
  Measure_act,			/* Measure the picked objects. */

  Calculatesection_act,		/* Recalculate the section line. */

  Undo_act,			/* The UNDO button was pressed down */
  Redo_act,			/* The REDO button was pressed down */
  Duplicate_act,		/* The Duplicate button was pressed down */
  Delete_act,			/* The Delete button was pressed */
  Cut_act,			/* The Cut button was pressed down */
  Paste_act,			/* The Paste button was pressed down */
  Group_act,			/* The Group button was pressed down */ 
  Ungroup_act,			/* The Ungroup button was pressed down */
  Mirror_act,
  /* These will get the axe... where? Right in the neck, there. */
  Slice_act,
  Boolean_act,

  Activatetool_act,		/* Activate a tool (internal) */
  Docktool_act,			/* Dock a tool (internal) */

  Addproperty_act,		/* Assign a property to (a) feature(s). */
  Deleteproperty_act,		/* Clear (a) feature(s) of a property. */
  Copyproperty_act,		/* Copy a property from one feature to another*/

  Immediateupdate_act,		/* Update something about a feature. */
  Nonimmediateupdate_act,
  Maxactionkind
} actionkind;

/* Input Action Modifiers */

typedef enum
{
  Noactionmod = 0,
  Exact = 1,			/* Move/rotate/zoom to an exact pos/ */
				/* orientation/bboxsize */
  Relative,			/* Move/rotate/zoom to a relative pos/ */
				/* orientation/bboxsize*/
  Dragging,			/* This crosshair movement happened between */
				/* a pick action and a release action. */
  Rotating,			/* The object rotate button was held down */ 
				/* during this action. */
  Movingplane,			/* The plane movement button was held down */
				/* during this action. */
  Constrained,			/* The constrain button has been held down. */
  Doublepick,			/* The crosshair was not moved between two */
				/* successive pick actions */
  Triplepick,			/* The crosshair was not moved between three */
				/* successive pick actions */
  Actsonmother,			/* This action affects the feature's mother */

  Reflexive,			/* Acts on this feature, see actionprop.c */
  Actsonintersectingobjs,
  Actsonlastresults,
  Actsonproperty,
  Actsonselectables,
  
  Trapsaction,			/* whether this action stops the action */
				/* that invoked it from being processed */
				/* further. */
  Maxactionmodkind
} actionmodkind;


/* Action structures. */

/* One stack is for environment-aimed actions and two queues that are */
/* linked lists are for property-wide actions and feature-only actions. */

struct actionstruct
{
  /* these fields unused when these records are kept in a stack. */
  struct actionstruct *prev,*next;
  int type_id;
  struct liststruct *proplist;
  long featureflags;		/* not really used here but has to be compat */

  actionkind theaction;

  /* What this action utilizes as an actor (either one feature, */
  /* a group of features according to a common property, or if both nil, */
  /* if it's the environment. */
  featureptr source;		/* If nil, no specific source object. */
  property sources;		/* If Noproperty, no specific source features */

  /* What this action is aimed at, either one feature, a group of features */
  /* according to a common property, or if both nil, at the environment. */
  featureptr target;		/* If nil, no specific target object. */
  property targets;		/* If Noproperty, no specific target features */

  /* Actionmods are modifiers to environment-aimed actions, e.g. constrain. */
  /* action_mod convention: use [1] for Constrain, [0] for all the rest. */
  actionmodkind theaction_mod[Maxinputactionmods];
  union
  {
    struct
    {
      union anydata actiondata1;
      union anydata actiondata2;
      union anydata actiondata3;
      union anydata actiondata4;
    } data;
    struct
    {
      vertype rotatepos;
      vertype axis;
      int angle;
    } rotatedata;
    struct
    {
      Matrix transform,invtransform;
    } transformdata;
    vertype pos;
  } args;
};

typedef struct actionstruct actiontype;
typedef actiontype *actionptr;


#endif
